import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°—Ç–∞–¥–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
SECTION, QUIZ, COMPLETION = range(3)

# –î–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂–∞
sections = [
    {
        "title": "üõ≥ –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è",
        "content": "1.1. –†–∞–±–æ—Ç–∞ –Ω–∞ –ë–ú–†–¢ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –æ–ø–∞—Å–Ω–æ—Å—Ç—å—é\n"
                   "1.2. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –°–ò–ó: —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã–µ –∂–∏–ª–µ—Ç—ã, –Ω–µ—Å–∫–æ–ª—å–∑—è—â–∞—è –æ–±—É–≤—å, –∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏\n"
                   "1.3. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ø–∞–ª—É–±–µ –±–µ–∑ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–æ –≤—Ä–µ–º—è —à—Ç–æ—Ä–º–∞\n\n"
                   "<b>–°—É–¥–∞ –∫–ª–∞—Å—Å–∞ –ë–ú–†–¢:</b>\n"
                   "- '–ö–∞–ø–∏—Ç–∞–Ω –°–º–∏—Ä–Ω–æ–≤'\n- '–û–∫–µ–∞–Ω'\n- '–ú–æ—Ä—è–Ω–∞'\n(–∏ –µ—â–µ 8 —Å—É–¥–æ–≤)",
    },
    {
        "title": "‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã",
        "content": "2.1. –°–∫–æ–ª—å–∑–∫–∏–µ –ø–∞–ª—É–±—ã\n2.2. –ú–æ—Ä—Å–∫–∏–µ –≤–æ–ª–Ω—ã\n2.3. –†—ã–±–æ–ª–æ–≤–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ\n"
                   "2.4. –ù–∏–∑–∫–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã\n2.5. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å\n\n"
                   "<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n- –í—Å–µ–≥–¥–∞ –¥–µ—Ä–∂–∞—Ç—å—Å—è –∑–∞ –ø–æ—Ä—É—á–Ω–∏\n- –†–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã—Ö –∂–∏–ª–µ—Ç–∞—Ö\n- –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–∞—é—â–∏–º –º–µ—Ö–∞–Ω–∏–∑–º–∞–º"
    },
    {
        "title": "üö® –ê–≤–∞—Ä–∏–π–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏",
        "content": "3.1. –ß–µ–ª–æ–≤–µ–∫ –∑–∞ –±–æ—Ä—Ç–æ–º: –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –±—Ä–æ—Å–∏—Ç—å —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã–π –∫—Ä—É–≥, —Å–æ–æ–±—â–∏—Ç—å –∫–∞–ø–∏—Ç–∞–Ω—É\n"
                   "3.2. –ü–æ–∂–∞—Ä: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π –æ–≥–Ω–µ—Ç—É—à–∏—Ç–µ–ª—å, —Å–ª–µ–¥–æ–≤–∞—Ç—å –∫ –º–µ—Å—Ç–∞–º —Å–±–æ—Ä–∞\n"
                   "3.3. –†–∞–∑–≥–µ—Ä–º–µ—Ç–∏–∑–∞—Ü–∏—è: –Ω–∞–¥–µ—Ç—å –≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º—ã, —Å–ª–µ–¥–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–∏—è–º –∫–æ–º–∞–Ω–¥—ã\n\n"
                   "<b>–í–∞–∂–Ω–æ:</b> –í—Å–µ —á–ª–µ–Ω—ã —ç–∫–∏–ø–∞–∂–∞ –¥–æ–ª–∂–Ω—ã –∑–Ω–∞—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤ –∏ —Å–ø–∞—Å—Å—Ä–µ–¥—Å—Ç–≤"
    }
]

quizzes = [
    {
        "question": "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã–π –∂–∏–ª–µ—Ç –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –Ω–∞ –ø–∞–ª—É–±—É –≤–æ –≤—Ä–µ–º—è —à—Ç–æ—Ä–º–∞?",
        "options": ["–¢–æ–ª—å–∫–æ –Ω–æ—á—å—é", "–î–∞, –≤—Å–µ–≥–¥–∞", "–¢–æ–ª—å–∫–æ –Ω–æ–≤–∏—á–∫–∞–º"],
        "correct": 1
    },
    {
        "question": "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞ –∑–∞ –±–æ—Ä—Ç–æ–º?",
        "options": [
            "–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É", 
            "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –±—Ä–æ—Å–∏—Ç—å —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã–π –∫—Ä—É–≥ –∏ —Å–æ–æ–±—â–∏—Ç—å –∫–∞–ø–∏—Ç–∞–Ω—É", 
            "–ü—Ä—ã–≥–Ω—É—Ç—å –∑–∞ –±–æ—Ä—Ç –¥–ª—è —Å–ø–∞—Å–µ–Ω–∏—è"
        ],
        "correct": 1
    }
]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
def start(update: Update, context: CallbackContext) -> int:
    user = update.effective_user
    update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –≤–≤–æ–¥–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞ –¥–ª—è —ç–∫–∏–ø–∞–∂–µ–π –ë–ú–†–¢.\n\n"
        "<b>–ü—Ä–æ–π–¥–∏—Ç–µ 3 —Ä–∞–∑–¥–µ–ª–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂–∞:</b>\n"
        "1. –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è\n"
        "2. –û–ø–∞—Å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã\n"
        "3. –î–µ–π—Å—Ç–≤–∏—è –≤ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö\n\n"
        "–ù–∞–∂–º–∏—Ç–µ /begin —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂"
    )
    return ConversationHandler.END

def begin(update: Update, context: CallbackContext) -> int:
    context.user_data['current_section'] = 0
    return show_section(update, context)

def show_section(update: Update, context: CallbackContext) -> int:
    section_index = context.user_data['current_section']
    section = sections[section_index]
    
    keyboard = [
        [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª ‚Üí", callback_data='next')],
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data='quiz')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text(
        text=f"<b>{section['title']}</b>\n\n{section['content']}",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    return SECTION

def start_quiz(update: Update, context: CallbackContext) -> int:
    context.user_data['current_question'] = 0
    context.user_data['score'] = 0
    return show_question(update, context)

def show_question(update: Update, context: CallbackContext) -> int:
    question_index = context.user_data['current_question']
    question = quizzes[question_index]
    
    keyboard = []
    for i, option in enumerate(question['options']):
        keyboard.append([InlineKeyboardButton(option, callback_data=str(i))])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text(
        text=f"‚ùì –í–æ–ø—Ä–æ—Å {question_index+1}/{len(quizzes)}\n\n{question['question']}",
        reply_markup=reply_markup
    )
    return QUIZ

def handle_answer(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    question_index = context.user_data['current_question']
    selected_option = int(query.data)
    
    if selected_option == quizzes[question_index]['correct']:
        context.user_data['score'] += 1
        feedback = "‚úÖ –í–µ—Ä–Ω–æ!"
    else:
        feedback = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!"
    
    # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    context.user_data['current_question'] += 1
    
    if context.user_data['current_question'] < len(quizzes):
        query.edit_message_text(text=f"{feedback} –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É...")
        return show_question(update, context)
    else:
        score = context.user_data['score']
        total = len(quizzes)
        query.edit_message_text(
            text=f"üìù –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{total}\n\n"
            "–ò–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤–Ω–µ—Å–µ–Ω—ã –≤ –∂—É—Ä–Ω–∞–ª —É—á–µ—Ç–∞."
        )
        return COMPLETION

def cancel(update: Update, context: CallbackContext) -> int:
    update.message.reply_text('–ò–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –ø—Ä–µ—Ä–≤–∞–Ω')
    return ConversationHandler.END

def main() -> None:
    # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
    TOKEN = "BOT_TOKEN"
    
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('begin', begin)],
        states={
            SECTION: [
                CallbackQueryHandler(show_section, pattern='^back$'),
                CallbackQueryHandler(start_quiz, pattern='^quiz$'),
                CallbackQueryHandler(show_section, pattern='^next$'),
            ],
            QUIZ: [
                CallbackQueryHandler(handle_answer)
            ],
            COMPLETION: [
                CallbackQueryHandler(start, pattern='^done$')
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(conv_handler)

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
