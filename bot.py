import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ForceReply
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à—Ä–∏—Ñ—Ç–∞:", os.path.exists("fonts/DejaVuSans.ttf"))
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image as RLImage
from reportlab.lib.styles import getSampleStyleSheet
import os

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –î–∞–Ω–Ω—ã–µ
USERS = {
    "moiseenko": "–ú–æ–∏—Å–µ–µ–Ω–∫–æ –ê.–°.",
    "zorin": "–ó–æ—Ä–∏–Ω –Ø.–î.",
    "chernov": "–ß–µ—Ä–Ω–æ–≤ –ù.–í.",
    "zuev": "–ó—É–µ–≤ –†.–ò."
}

LEGAL_ENTITIES = {
    "turnif": {
        "name": "–ê–û –¢—É—Ä–Ω–∏—Ñ",
        "ships": ["–ë–ú–†–¢ –ö–∞–ø–∏—Ç–∞–Ω –û–ª–µ–π–Ω–∏—á—É–∫", "–ë–ú–†–¢ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"]
    },
    "vostokryb": {
        "name": "–û–û–û –í–æ—Å—Ç–æ–∫—Ä—ã–±–ø—Ä–æ–º",
        "ships": ["–ë–ú–†–¢ –í–ª–∞–¥–∏–º–∏—Ä –õ–∏–º–∞–Ω–æ–≤", "–ë–ú–†–¢ –ò–≤–∞–Ω –ö–∞–ª–∏–Ω–∏–Ω"]
    },
    "intraros": {
        "name": "–ê–û –ò–Ω—Ç—Ä–∞—Ä–æ—Å",
        "ships": ["–ë–ú–†–¢ –ë–µ—Ä–µ–∑–∏–Ω–∞"]
    },
    "dmp": {
        "name": "–ê–û –î–ú–ü –†–ú",
        "ships": ["–ë–ú–†–¢ –ü–∞–≤–µ–ª –ë–∞—Ç–æ–≤"]
    },
    "rmd": {
        "name": "–û–û–û –†–ú–î –Æ–í–ê",
        "ships": ["–ë–ú–†–¢ –ú—ã—Å –ë–∞—Å–∞—Ä–≥–∏–Ω–∞"]
    },
    "mintay": {
        "name": "–û–û–û –ú–∏–Ω—Ç–∞–π –ü–µ—Ä–≤—ã–π",
        "ships": ["–ë–ú–†–¢ –ö–∞–ø–∏—Ç–∞–Ω –í–¥–æ–≤–∏—á–µ–Ω–∫–æ"]
    },
    "novostroy": {
        "name": "–û–û–û –ù–æ–≤–æ—Å—Ç—Ä–æ–π",
        "ships": ["–ë–ú–†–¢ –ú–µ—Ö–∞–Ω–∏–∫ –ú–∞—Å–ª–∞–∫"]
    },
    "rrpk": {
        "name": "–û–û–û –†–†–ü–ö-–í–æ—Å—Ç–æ–∫",
        "ships": ["–ë–ú–†–¢ –ú–µ—Ö–∞–Ω–∏–∫ –°–∏–∑–æ–≤"]
    },
    "seyval": {
        "name": "–û–û–û –ù–æ–≤—ã–π –°–µ–π–≤–∞–ª",
        "ships": ["–ë–ú–†–¢ –ö–∞–ø–∏—Ç–∞–Ω –ú–∞—Ä—Ç—ã–Ω–æ–≤"]
    }
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
(SELECTING_USER,
 SELECTING_ENTITY,
 SELECTING_SHIP,
 ENTERING_DATE,
 ADDING_VIOLATION) = range(5)

user_data = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(name, callback_data=uid)] for uid, name in USERS.items()]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=reply_markup)
    return SELECTING_USER


async def select_entity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_data['user'] = query.data
    keyboard = [[InlineKeyboardButton(entity["name"], callback_data=key)] for key, entity in LEGAL_ENTITIES.items()]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ:", reply_markup=reply_markup)
    return SELECTING_ENTITY


async def select_ship(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    entity_key = query.data
    entity = LEGAL_ENTITIES[entity_key]
    user_data['entity'] = entity["name"]
    keyboard = [[InlineKeyboardButton(ship, callback_data=ship)] for ship in entity["ships"]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–¥–Ω–æ:", reply_markup=reply_markup)
    return SELECTING_SHIP


async def enter_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_data['ship'] = query.data
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    return ENTERING_DATE


async def process_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        from datetime import datetime
        datetime.strptime(text, "%d.%m.%Y")
        user_data['date'] = text
        if 'violations' not in user_data:
            user_data['violations'] = []
        await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ. –ï—Å–ª–∏ —Ñ–æ—Ç–æ –µ—Å—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ.")
        return ADDING_VIOLATION
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–î–î.–ú–ú.–ì–ì–ì–ì).")
        return ENTERING_DATE


async def handle_violation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text and text.lower() == "/done":
        return await generate_report(update, context)

    if text:
        user_data['violations'].append({"description": text, "photo": None})
        await update.message.reply_text("–ù–∞—Ä—É—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /done.")
        return ADDING_VIOLATION

    photo = update.message.photo[-1]  # —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    caption = update.message.caption or ""
    user_data['violations'][-1]["photo"] = photo.file_id
    user_data['violations'][-1]["caption"] = caption
    await update.message.reply_text("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /done.")
    return ADDING_VIOLATION


async def generate_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    violations = user_data.get('violations', [])
    if not violations:
        await update.message.reply_text("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è.")
        return ADDING_VIOLATION

    # –¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
    report_text = (
        f"üìã –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ:\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {USERS[user_data['user']]}\n"
        f"–Æ—Ä–ª–∏—Ü–æ: {user_data['entity']}\n"
        f"–°—É–¥–Ω–æ: {user_data['ship']}\n"
        f"–î–∞—Ç–∞: {user_data['date']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {len(violations)}\n\n"
        f"üîç –û–ø–∏—Å–∞–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π:"
    )
    await update.message.reply_text(report_text)

    for i, violation in enumerate(violations):
        desc = f"{i + 1}. {violation['description']}"
        await update.message.reply_text(desc)
        if violation['photo']:
            await update.message.reply_photo(photo=violation['photo'], caption=violation['caption'])

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
    pdf_path = create_pdf_report(user_data)
    await update.message.reply_document(document=open(pdf_path, 'rb'))

    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    user_data.clear()
    await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ /start.")
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data.clear()
    await update.message.reply_text("–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ /start.")
    return ConversationHandler.END


def create_pdf_report(data):
    filename = f"report_{data['date'].replace('.', '_')}.pdf"
    doc = SimpleDocTemplate(filename)
    styles = getSampleStyleSheet()
    story = []

    title = Paragraph("üìã –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ö—Ä–∞–Ω—ã —Ç—Ä—É–¥–∞", styles['Title'])
    story.append(title)
    story.append(Spacer(1, 24))

    text = f"""
    <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {USERS[data['user']]}<br/>
    <b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ:</b> {data['entity']}<br/>
    <b>–°—É–¥–Ω–æ:</b> {data['ship']}<br/>
    <b>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {data['date']}<br/>
    <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π:</b> {len(data['violations'])}<br/>
    """
    story.append(Paragraph(text, styles['Normal']))
    story.append(Spacer(1, 12))

    for i, v in enumerate(data['violations']):
        story.append(Paragraph(f"<b>{i+1}.</b> {v['description']}", styles['Normal']))
        if v['photo']:
            story.append(Spacer(1, 12))
            # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω—É–∂–Ω–æ –∏—Ö –∑–∞–≥—Ä—É–∑–∏—Ç—å (—ç—Ç–æ –ø—Ä–∏–º–µ—Ä)
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å file.download_as_bytearray(), –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–ª–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω—ã –∫ PDF

    doc.build(story)
    return filename


# --- –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–π ---

def main():
    application = ApplicationBuilder().token("8045118401:AAGrrj1LTm-UzUuwNqFIY1L-BSYCz53usUs").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_USER: [CallbackQueryHandler(select_entity)],
            SELECTING_ENTITY: [CallbackQueryHandler(select_ship)],
            SELECTING_SHIP: [CallbackQueryHandler(enter_date)],
            ENTERING_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_date)],
            ADDING_VIOLATION: [
                MessageHandler(filters.PHOTO, handle_violation),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_violation),
                CommandHandler('done', generate_report),
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()
