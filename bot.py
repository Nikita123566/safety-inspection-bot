import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ForceReply
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image as RLImage, HRFlowable
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.enums import TA_CENTER, TA_LEFT
import os

def create_pdf_report(data, photos=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF-–æ—Ç—á–µ—Ç –ø–æ –¥–∞–Ω–Ω—ã–º –ø—Ä–æ–≤–µ—Ä–∫–∏.
    
    :param data: dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —é—Ä–ª–∏—Ü–∞, –¥–∞—Ç—ã –∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π
    :param photos: dict —Å –ø—É—Ç—è–º–∏ –∫ —Ñ–æ—Ç–æ –∏–ª–∏ file_id
    :return: –ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É PDF
    """

    # –ü—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É
    font_path = os.path.join("fonts", "DejaVuSans.ttf")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–∞
    try:
        pdfmetrics.registerFont(TTFont('DejaVu', font_path))
    except Exception as e:
        print(f"[ERROR] –®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        return None

    # –°—Ç–∏–ª–∏
    style_title = ParagraphStyle(
        'title',
        fontName='DejaVu',
        fontSize=16,
        leading=20,
        alignment=TA_LEFT
    )

    style_normal = ParagraphStyle(
        'normal',
        fontName='DejaVu',
        fontSize=12,
        leading=14,
        alignment=TA_LEFT
    )

    style_bold = ParagraphStyle(
        'bold',
        fontName='DejaVu',
        fontSize=12,
        leading=14,
        alignment=TA_LEFT,
        fontName='DejaVu'
    )

    # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    filename = f"report_{data['date'].replace('.', '_')}.pdf"
    doc = SimpleDocTemplate(filename)
    story = []

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    story.append(Paragraph("üìã –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ö—Ä–∞–Ω—ã —Ç—Ä—É–¥–∞", style_title))
    story.append(Spacer(1, 24))

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    user_name = USERS[data['user']]
    story.append(Paragraph(f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name}", style_normal))
    story.append(Paragraph(f"<b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ:</b> {data['entity']}", style_normal))
    story.append(Paragraph(f"<b>–°—É–¥–Ω–æ:</b> {data['ship']}", style_normal))
    story.append(Paragraph(f"<b>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {data['date']}", style_normal))
    story.append(Paragraph(f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π:</b> {len(data['violations'])}", style_normal))
    story.append(HRFlowable(width="100%", thickness=1, color="black"))
    story.append(Spacer(1, 12))

    # –ù–∞—Ä—É—à–µ–Ω–∏—è
    for i, violation in enumerate(data['violations']):
        desc = f"<b>{i + 1}.</b> {violation['description']}"
        story.append(Paragraph(desc, style_normal))

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
        if violation.get('photo'):
            photo_file_id = violation['photo']
            caption = violation.get('caption', '')

            # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ —Ç—ã –µ–≥–æ —Å–∫–∞—á–∏–≤–∞–µ—à—å)
            photo_path = os.path.join("photos", f"{photo_file_id}.jpg")

            if os.path.exists(photo_path):
                story.append(Spacer(1, 12))
                story.append(RLImage(photo_path, width=300, height=200))
                if caption:
                    story.append(Paragraph(f"<i>–ü–æ–¥–ø–∏—Å—å: {caption}</i>", style_normal))
                story.append(Spacer(1, 12))

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
    doc.build(story)
    return filename


# --- –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–π ---

def main():
    application = ApplicationBuilder().token("8045118401:AAGrrj1LTm-UzUuwNqFIY1L-BSYCz53usUs").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_USER: [CallbackQueryHandler(select_entity)],
            SELECTING_ENTITY: [CallbackQueryHandler(select_ship)],
            SELECTING_SHIP: [CallbackQueryHandler(enter_date)],
            ENTERING_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_date)],
            ADDING_VIOLATION: [
                MessageHandler(filters.PHOTO, handle_violation),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_violation),
                CommandHandler('done', generate_report),
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()
