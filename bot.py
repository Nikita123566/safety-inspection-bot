import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
USERS = {"user1": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", "user2": "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤"}
LEGAL_ENTITIES = ["–û–û–û –†–æ–º–∞—à–∫–∞", "–ê–û –ì–æ–ª—É–±—å"]
OBJECTS = ["–°–∫–ª–∞–¥ ‚Ññ1", "–¶–µ—Ö ‚Ññ3"]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECTING_USER, SELECTING_ENTITY, SELECTING_OBJECT, ENTERING_DATE, TAKING_PHOTO = range(5)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(name, callback_data=uid)] for uid, name in USERS.items()]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=reply_markup)
    return SELECTING_USER

async def select_entity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_data['user'] = query.data
    keyboard = [[InlineKeyboardButton(entity, callback_data=entity)] for entity in LEGAL_ENTITIES]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ:", reply_markup=reply_markup)
    return SELECTING_ENTITY

async def select_object(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_data['entity'] = query.data
    keyboard = [[InlineKeyboardButton(obj, callback_data=obj)] for obj in OBJECTS]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:", reply_markup=reply_markup)
    return SELECTING_OBJECT

async def enter_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_data['object'] = query.data
    await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    return ENTERING_DATE

async def process_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        from datetime import datetime
        datetime.strptime(text, "%d.%m.%Y")
        user_data['date'] = text
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ /done.")
        return TAKING_PHOTO
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–î–î.–ú–ú.–ì–ì–ì–ì).")
        return ENTERING_DATE

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1]  # –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    caption = update.message.caption or "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
    if 'photos' not in user_data:
        user_data['photos'] = []
    user_data['photos'].append((photo.file_id, caption))
    await update.message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /done.")

async def done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'photos' not in user_data or len(user_data['photos']) == 0:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ.")
        return TAKING_PHOTO

    report = (
        f"üìã –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ:\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {USERS[user_data['user']]}\n"
        f"–Æ—Ä–ª–∏—Ü–æ: {user_data['entity']}\n"
        f"–û–±—ä–µ–∫—Ç: {user_data['object']}\n"
        f"–î–∞—Ç–∞: {user_data['date']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {len(user_data['photos'])}\n\n"
        f"üì∏ –§–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π:"
    )
    await update.message.reply_text(report)

    for i, (file_id, caption) in enumerate(user_data['photos']):
        await update.message.reply_photo(photo=file_id, caption=f"{i+1}. {caption}")

    user_data.clear()
    await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ /start.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

def main():
    application = ApplicationBuilder().token("8045118401:AAGrrj1LTm-UzUuwNqFIY1L-BSYCz53usUs").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_USER: [CallbackQueryHandler(select_entity)],
            SELECTING_ENTITY: [CallbackQueryHandler(select_object)],
            SELECTING_OBJECT: [CallbackQueryHandler(enter_date)],
            ENTERING_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_date)],
            TAKING_PHOTO: [
                MessageHandler(filters.PHOTO, handle_photo),
                CommandHandler('done', done),
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()